# Mrk Kernel Build System
# Copyright (c) 2021 Yusuf M, All Rights Reserved.

VER_MAJOR = 0
VER_MINOR = 4
VER_PATCH = 5

# Export all variables so that subdirs can access them
.EXPORT_ALL_VARIABLES:

# Silent builds are always on, no matter the build type
# Turn off if V is set (like this 'V=1 make iso')
ifeq ($(V),)
.SILENT:
endif

OUT_DIR ?= out/Clang-Debug
BUILD_DIR := $(addprefix $(shell pwd)/,$(OUT_DIR))
KERNEL    ?= $(OUT_DIR)/mrk64
ISO_IMAGE ?= $(OUT_DIR)/kernel.iso

# Build in release mode by default, since most people aren't developers
# Comment this line and uncomment the second line to change

# BUILD_RELEASE = 1
BUILD_DEBUG = 1

# Build the kernel and version header by default
.PHONY: all
all: $(KERNEL)

# These are flags shared by both the C and C++ Compiler
# These flags are used in every compilation, so changes here apply system-wide.
COMPILE_FLAGS := -ffreestanding              \
	         -mno-red-zone               \
		 -fno-stack-protector        \
		 -fno-builtin                \
		 -fno-pic -fpie              \
		 -pipe                       \
		 -I $(shell pwd)/include     \
		 -I $(shell pwd)/include/lib \
		 -mno-sse                    \
		 -mno-sse2                   \
		 -mno-80387                  \
		 -mno-mmx                    \

# Disable warnings and increase optimization if release
# Otherwise, Add debug symbols and increase warnings
ifdef BUILD_RELEASE
COMPILE_FLAGS += -w -O2
else
COMPILE_FLAGS += -g -O0 -Wall
endif

KERNEL_C_FLAGS   = $(COMPILE_FLAGS) -std=c11
KERNEL_CXX_FLAGS = $(COMPILE_FLAGS) -fno-rtti -fno-exceptions -std=c++17 

# Switch to a LLVM Toolset on request.
ifdef BUILD_CLANG
CC = clang
CXX = clang++
LD = ld.lld
AS = nasm
STRIP = strip
KERNEL_CXX_FLAGS += -fsanitize=integer
else
# We use a GNU Toolset by default since its the most widespread toolchain
CC = gcc
CXX = g++
LD = ld
AS = nasm
STRIP = strip
KERNEL_CXX_FLAGS += -fsanitize=undefined
endif

# But switch to a LLVM one on request.
ifdef BUILD_CLANG
CC = clang
CXX = clang++
LD = ld.lld
endif

ARCHIVES = $(BUILD_DIR)/arch/arch.o $(BUILD_DIR)/kernel/kernel.o $(BUILD_DIR)/mm/mm.o 
TARGETS  = arch kernel mm init 

PROGRESS   := printf "  \\033[1;96m%8s\\033[0m  \\033[1;m%s\\033[0m\\n"

include/internal/version.h: Makefile 
	$(PROGRESS) GEN version.h
	rm -f include/internal/version.h
	@echo \#pragma once > include/internal/version.h
	@echo \#define MRK_VERSION \"$(VER_MAJOR).$(VER_MINOR).$(VER_PATCH)\" >> include/internal/version.h
	@echo \#define MRK_BUILD_DATE \"`date +%D`\" >> include/internal/version.h

dummy:
subdirs: dummy
	set -e; for i in $(TARGETS); do $(MAKE) --no-print-directory -C $$i -f build.mk; done

$(KERNEL): include/internal/version.h subdirs
	$(PROGRESS) KERNEL $@
	$(LD) -T misc/kernel.ld -z max-page-size=0x1000 -nostdlib -o $@ $(ARCHIVES)

version_clean: 
	rm -f include/internal/version.h

clean: version_clean
	$(PROGRESS) CLEAN $(BUILD_DIR)
	rm -rf $(BUILD_DIR)
	rm -f 'find . -name .depend -print'

depend dep:
	$(PROGRESS) GEN .depend
	touch include/internal/version.h
	set -e; for i in $(SUBDIRS); do $(MAKE) -C $$i dep; done
	rm -f include/internal/version.h

# Limine and Image Creation

$(OUT_DIR)/limine:
	$(PROGRESS) CLONE limine
	git clone https://github.com/limine-bootloader/limine.git --branch=v2.0-branch-binary --depth=1 $(OUT_DIR)/limine &> /dev/null
	make -C $(OUT_DIR)/limine

.PHONY: iso run run-kvm
iso: $(ISO_IMAGE)
$(ISO_IMAGE): $(OUT_DIR)/limine $(KERNEL)
	$(PROGRESS) ISO $(ISO_IMAGE)
	rm -rf iso_root
	mkdir -p iso_root
	cp $(KERNEL) \
		misc/limine.cfg $(OUT_DIR)/init $(OUT_DIR)/limine/limine.sys $(OUT_DIR)/limine/limine-cd.bin $(OUT_DIR)/limine/limine-eltorito-efi.bin iso_root/
	xorriso -as mkisofs -b limine-cd.bin \
		-no-emul-boot -boot-load-size 4 -boot-info-table \
		--efi-boot limine-eltorito-efi.bin \
		-efi-boot-part --efi-boot-image --protective-msdos-label \
		iso_root -o $(ISO_IMAGE) &> /dev/null
	$(OUT_DIR)/limine/limine-install $(ISO_IMAGE) &> /dev/null
	rm -rf iso_root

run: $(ISO_IMAGE)
	qemu-system-x86_64 -cdrom $(ISO_IMAGE) -debugcon stdio -d cpu_reset -D $(OUT_DIR)/qemu.log -cpu max

run-kvm: $(ISO_IMAGE)
	qemu-system-x86_64 -m 2G -smp 2 --enable-kvm -cdrom $(ISO_IMAGE) -debugcon stdio -d cpu_reset -D $(OUT_DIR)/qemu.log -cpu max,x2apic,check

